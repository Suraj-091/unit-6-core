df[,i] <- as.numeric(sub("%", "",df[,i],fixed=TRUE))/100
raw_df <- filter(raw_df, rowSums(is.na(raw_df[-1])) != ncol(raw_df[-1]))
# Take transpose, nullify rownames and add country column as a variable
df = setNames(data.frame(t(raw_df[,-1])), raw_df[,1])
df <- newdf %>% mutate(country=rownames(newdf), .before="Financial assets")
rownames(df) <- NULL
raw_df <- filter(raw_df, rowSums(is.na(raw_df[-1])) != ncol(raw_df[-1]))
# Take transpose, nullify rownames and add country column as a variable
df = setNames(data.frame(t(raw_df[,-1])), raw_df[,1])
df <- newdf %>% mutate(country=rownames(newdf), .before="Financial assets")
rownames(df) <- NULL
View(df)
for(i in 2:ncol(df)){
df[,i] <- as.numeric(sub("%", "",df[,i],fixed=TRUE))/100
}
rm(list=ls())
raw_data <- read_excel("~/Core R Code/household_finances_and_gdp_pc.xlsx")
View(raw_data)
# Convert to data frame
mode(raw_data)
raw_df <- data.frame(raw_data)
View(raw_df)
raw_df <- filter(raw_df, rowSums(is.na(raw_df[-1])) != ncol(raw_df[-1]))
# Take transpose, nullify rownames and add country column as a variable
df = setNames(data.frame(t(raw_df[,-1])), raw_df[,1])
df <- newdf %>% mutate(country=rownames(newdf), .before="Financial assets")
# Rename all variables
df <- df %>% # Assets
rename(fin_ast = "Financial assets",
deposits = "Deposits",
ret_ast = "Retirement assetsand life insurance",
dir_stock = "Directly held stocks",
mutual_funds = "Mutual funds",
total_stock = "Total direct and indirect holdings of stocks",
bonds = "Bonds",
other_ast = "Other assets",
nonfin_ast = "Nonfinancial assets",
veh_val_other_ast = "Vehicles, valuables, and other assets",
main_res = "Main residence",
other_realest = "Other real estate",
priv_biz = "Private businesses",
# Liabilities
hh_lib = "Household liabilities",
veh_stu_other_debt = "Vehicle loans, student loans, and other debt",
credit_cards = "Credit cards",
od_creditlines = "Overdrafts and credit lines",
prim_mort = "Mortgage debt for primary residence",
other_mort = "Other mortgage debt",
#GDPPC PPP
gdppc = "GDPPC PPP")
View(df)
View(df)
for (i in colnames(df)){
for (j in df[i]){
if grepl("%", j, fixed=TRUE):
for (i in colnames(df)){
for (j in df[i]){
if (grepl("%", j, fixed=TRUE)){
df[i,j] <- as.numeric(sub("%","",df[i,j]))/100
} else{
df[i,j] <- as.numeric(df[i,j])
}
}
}
for (i in colnames(df)){
for (j in df[i]){
if (grepl("%", df[i,j], fixed=TRUE)){
df[i,j] <- as.numeric(sub("%","",df[i,j]))/100
} else{
df[i,j] <- as.numeric(df[i,j])
}
}
}
for (i in 1:ncol(df)){
for (j in 1:nrow(df)){
if (grepl("%", df[i,j], fixed=TRUE)){
df[i,j] <- as.numeric(sub("%","",df[i,j]))/100
} else{
df[i,j] <- as.numeric(df[i,j])
}
}
}
# Take transpose, nullify rownames and add country column as a variable
df = setNames(data.frame(t(raw_df[,-1])), raw_df[,1])
df <- newdf %>% mutate(country=rownames(newdf), .before="Financial assets")
rownames(df) <- NULL
# Rename all variables
df <- df %>% # Assets
rename(fin_ast = "Financial assets",
deposits = "Deposits",
ret_ast = "Retirement assetsand life insurance",
dir_stock = "Directly held stocks",
mutual_funds = "Mutual funds",
total_stock = "Total direct and indirect holdings of stocks",
bonds = "Bonds",
other_ast = "Other assets",
nonfin_ast = "Nonfinancial assets",
veh_val_other_ast = "Vehicles, valuables, and other assets",
main_res = "Main residence",
other_realest = "Other real estate",
priv_biz = "Private businesses",
# Liabilities
hh_lib = "Household liabilities",
veh_stu_other_debt = "Vehicle loans, student loans, and other debt",
credit_cards = "Credit cards",
od_creditlines = "Overdrafts and credit lines",
prim_mort = "Mortgage debt for primary residence",
other_mort = "Other mortgage debt",
#GDPPC PPP
gdppc = "GDPPC PPP")
View(df)
raw_data <- read_excel("~/Core R Code/household_finances_and_gdp_pc.xlsx")
View(raw_data)
# Convert to data frame
mode(raw_data)
raw_df <- data.frame(raw_data)
View(raw_df)
# -------------------------- Data Cleaning -------------------------------------
# Remove header rows
raw_df <- filter(raw_df, rowSums(is.na(raw_df[-1])) != ncol(raw_df[-1]))
# Take transpose, nullify rownames and add country column as a variable
df = setNames(data.frame(t(raw_df[,-1])), raw_df[,1])
df <- newdf %>% mutate(country=rownames(newdf), .before="Financial assets")
testdf <- df %>%
mutate(across(!country, case_when(grepl("%",curr_column(),fixed=TRUE)==TRUE,parse_number)))
testdf <- df %>%
mutate(curr_column() = if_else(grepl("%", curr_column(), fixed=TRUE),as.numeric(sub("%","",curr_column()))/100,curr_column()))
mutate(across(!country, curr_column() = if_else(grepl("%", curr_column(), fixed=TRUE),as.numeric(sub("%","",curr_column()))/100,curr_column()))
for (i in 1:ncol(df)){
for (j in 1:nrow(df)){
if (grepl("%", df[i,j], fixed=TRUE)){
df[i,j] <- as.numeric(sub("%","",df[i,j]))/100
print("converted to")
print(df[i,j])
} else{
df[i,j] <- as.numeric(df[i,j])
}
}
}
raw_data <- read_excel("~/Core R Code/household_finances_and_gdp_pc.xlsx")
View(raw_data)
# Convert to data frame
mode(raw_data)
raw_df <- data.frame(raw_data)
View(raw_df)
# -------------------------- Data Cleaning -------------------------------------
# Remove header rows
raw_df <- filter(raw_df, rowSums(is.na(raw_df[-1])) != ncol(raw_df[-1]))
# Take transpose, nullify rownames and add country column as a variable
df = setNames(data.frame(t(raw_df[,-1])), raw_df[,1])
df <- newdf %>% mutate(country=rownames(newdf), .before="Financial assets")
raw_data <- read_excel("~/Core R Code/household_finances_and_gdp_pc.xlsx")
View(raw_data)
# Convert to data frame
mode(raw_data)
raw_df <- data.frame(raw_data)
View(raw_df)
# -------------------------- Data Cleaning -------------------------------------
# Remove header rows
raw_df <- filter(raw_df, rowSums(is.na(raw_df[-1])) != ncol(raw_df[-1]))
# Take transpose, nullify rownames and add country column as a variable
df = setNames(data.frame(t(raw_df[,-1])), raw_df[,1])
df <- newdf %>% mutate(country=rownames(newdf), .before="Financial assets")
raw_df <- filter(raw_df, rowSums(is.na(raw_df[-1])) != ncol(raw_df[-1]))
# Take transpose, nullify rownames and add country column as a variable
df = setNames(data.frame(t(raw_df[,-1])), raw_df[,1])
df <- df %>% mutate(country=rownames(df), .before="Financial assets")
rownames(df) <- NULL
# Rename all variables
df <- df %>% # Assets
rename(fin_ast = "Financial assets",
deposits = "Deposits",
ret_ast = "Retirement assetsand life insurance",
dir_stock = "Directly held stocks",
mutual_funds = "Mutual funds",
total_stock = "Total direct and indirect holdings of stocks",
bonds = "Bonds",
other_ast = "Other assets",
nonfin_ast = "Nonfinancial assets",
veh_val_other_ast = "Vehicles, valuables, and other assets",
main_res = "Main residence",
other_realest = "Other real estate",
priv_biz = "Private businesses",
# Liabilities
hh_lib = "Household liabilities",
veh_stu_other_debt = "Vehicle loans, student loans, and other debt",
credit_cards = "Credit cards",
od_creditlines = "Overdrafts and credit lines",
prim_mort = "Mortgage debt for primary residence",
other_mort = "Other mortgage debt",
#GDPPC PPP
gdppc = "GDPPC PPP")
View(df)
testdf <- df %>%
mutate(curr_column() = if_else(grepl("%", curr_column(), fixed=TRUE),as.numeric(sub("%","",curr_column()))/100,curr_column))
testdf <- df%>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,fin_ast))
rland::last_trace()
rlang::last_trace()
testdf <- df%>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),1,0))
View(testdf)
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number,0))
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast),0))
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,0))
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),as.numeric(parse_number(fin_ast)/100),0))
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,fin_ast))
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,))
testdf <- df %>%
mutate(fin_ast = case_when(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100))
testdf <- df %>%
mutate(fin_ast = case_when(grepl("%", fin_ast, fixed=TRUE)==TRUE,parse_number(fin_ast)/100))
testdf <- df %>%
mutate(fin_ast = case_when(grepl("%", fin_ast, fixed=TRUE)=TRUE,parse_number(fin_ast)/100))
testdf <- df %>%
mutate(fin_ast = case_when(grepl("%", fin_ast, fixed=TRUE)~TRUE,parse_number(fin_ast)/100))
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,parse_number(fin_ast)))
testdf <- df %>%
mutate(across(!country, current_column() = if_else(grepl("%", current_column(), fixed=TRUE),parse_number(current_column())/100,parse_number(current_column))))
testdf <- df %>%
mutate(across(!country, current_column = if_else(grepl("%", current_column(), fixed=TRUE),parse_number(current_column())/100,parse_number(current_column))))
testdf <- df %>%
mutate(across(!country, cur_column() = if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column))))
testdf <- df %>%
mutate(across(!country, cur_column() <-  if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column))))
testdf <- df %>%
mutate(across(!country, cur_column() <- if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column))))
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,parse_number(fin_ast)))
mutate(across(!country, if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column())))
View(testdf)
testdf <- df %>%
mutate(across(!country, if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column()))))
mutate(across(!country, if_else(grepl("%", cur_column, fixed=TRUE),parse_number(cur_column/100,parse_number(cur_column)))
View(testdf)
testdf <- df %>%
mutate(across(!country, if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column()))))
?across
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,parse_number(fin_ast)))
testdf <- df %>%
mutate(across(!country, if_else(cur_column==fin_ast, 1, 0)))
testdf <- df %>%
mutate(across(!country, if_else(cur_column()=="fin_ast", 1, 0)))
testdf <- df %>%
mutate(across(!country, if_else(cur_column=="fin_ast", 1, 0)))
testdf <- df %>%
mutate(across(country, 1))
testdf <- df %>%
mutate(across(country, cur_column()=1))
testdf <- df %>%
mutate(across(country, cur_column() <- 1))
testdf <- df %>%
mutate(across(country, cur_column=1))
testdf <- df %>%
mutate(across(country, ~ cur_column=1))
testdf <- df %>%
mutate(across(country, ~ cur_column()))
testdf <- df %>%
mutate(across(country, ~ cur_column()=1))
testdf <- df %>%
mutate(across(country, ~ cur_column() <- 1))
testdf <- df %>%
mutate(across(country, ~ paste(cur_column())))
View(testdf)
testdf <- df %>%
mutate(across(country, paste(cur_column())))
testdf <- df %>%
mutate(across(country, ~ if(cur_column()==fin_ast, 1, 0)))
testdf <- df %>%
mutate(across(country, ~ if_else(cur_column()==fin_ast, 1, 0)))
testdf <- df %>%
mutate(across(country, ~ if_else(grepl("%", curr_column(), fixed=TRUE),parse_number(curr_column())/100,parse_number(curr_column()))))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", curr_column(), fixed=TRUE),parse_number(curr_column())/100,parse_number(curr_column()))))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column()))))
testdf <- df %>%
mutate(across(country, ~ if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column()))))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column(), fixed=TRUE),parse_number(cur_column())/100,parse_number(cur_column()))))
View(testdf)
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,parse_number(fin_ast))))
View(testdf)
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column, fixed=TRUE),parse_number(cur_column)/100,parse_number(cur_column))))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column(), fixed=TRUE), 1, 0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column(), fixed=TRUE), paste(cur_column()), 0)))
1
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column(), fixed=TRUE), 1, 0)))
testdf <- df %>%
mutate(across(!country, if_else(grepl("%", cur_column(), fixed=TRUE), 1, 0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column(), fixed=TRUE), 1, 0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", df$cur_column(), fixed=TRUE), 1, 0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column(), fixed=TRUE), 1, 0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", cur_column(), fixed=TRUE), 1, 0, NA)))
testdf <- df %>%
mutate(fin_ast = if_else(grepl("%", fin_ast, fixed=TRUE),parse_number(fin_ast)/100,parse_number(fin_ast)))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", fin_ast, fixed=TRUE), 1, 0, NA)))
testdf <- df %>%
mutate(across(!country, ~ paste(cur_column(), round(.x, 2))))
testdf <- df %>%
mutate(across(!country, ~ paste(cur_column(), round(.fin_ast, 2))))
testdf <- df %>%
mutate(across(!country, ~ paste(cur_column()))))
testdf <- df %>%
mutate(across(!country, ~ paste(cur_column())))
testdf <- df %>%
mutate(across(!country, ~ if(cur_column()==fin_ast,1,0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(cur_column()==fin_ast,1,0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(cur_column()=="fin_ast",1,0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(as.name(cur_column())==fin_ast,1,0)))
testdf <- df %>%
mutate(across(!country, ~ cur_group()))
testdf <- df %>%
mutate(across(!country, ~ cur_group_id()))
testdf <- df %>%
mutate(across(!country, ~ cur_group_rows()))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", df[[cur_column()]], fixed=TRUE), 1,0)))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", df[[cur_column()]], fixed=TRUE), 1,0,NA)))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", df[[cur_column()]], fixed=TRUE),
parse_number(df[[cur_column()]])/100,
parse_number(df[[curcolumn()]]))))
testdf <- df %>%
mutate(across(!country, ~ if_else(grepl("%", df[[cur_column()]], fixed=TRUE),
parse_number(df[[cur_column()]])/100,
parse_number(df[[cur_column()]]))))
plot(x=df$gdppc, y=df$other_mort)
plot(x=testdf$gdppc, y=testdf$other_mort)
df <- df %>%
mutate(across(!country, ~ if_else(grepl("%", df[[cur_column()]], fixed=TRUE),
parse_number(df[[cur_column()]])/100,
parse_number(df[[cur_column()]]))))
View(df)
install.packages("ggplot2")
library("ggplot2")
PlotList = list()
for (i in 2:(ncol(df)-1)){
x <- plot(x=df[,ncols(df)], y=df[,i])
PlotList.append(x)
}
x <- plot(x=df[,ncol(df)], y=df[,i])
PlotList = list()
for (i in 2:(ncol(df)-1)){
x <- plot(x=df[,ncol(df)], y=df[,i])
PlotList.append(x)
}
PlotList <- list.append(PlotList, x)
PlotList = list()
for (i in 2:(ncol(df)-1)){
x <- plot(x=df[,ncol(df)], y=df[,i])
PlotList <- append(PlotList, x)
}
PlotList
for (i in 2:(ncol(df)-1)){
x <- plot(x=df[,ncol(df)], y=df[,i])
PlotList <- append(PlotList, x)
}
PlotList
PlotList[[i-1]] = x
ggplot(df, aes(x=df$gdppc, y=df$fin_ast))
ggplot(df, aes(x=gdppc, y=fin_ast))
ggplot(df, aes(x=gdppc, y=fin_ast)) +
geom_point(aes(color = factor(gear)))
ggplot(df, aes(x=gdppc, y=fin_ast)) +
geom_point()
ggplot(df, aes(x=df[1], y=fin_ast)) +
geom_point()
ggplot(df, aes(x=gdppc, y=fin_ast)) +
geom_point()
x <- ggplot(df, aes(x=gdppc, y=fin_ast)) +
geom_point()
# Now generate plots
colnames <- names(df)[2:ncol(df)-1]
colnames
# Now generate plots
colnames <- names(df[2:ncol(df)-1])
colnames
# Now generate plots
colnames <- names(df[,2:ncol(df)-1])
colnames
# Now generate plots
colnames <- names(df[,2:(ncol(df)-1)])
colnames
PlotList <- append(PlotList, x)
grid.arrange(PlotList, ncol=5)
ggplot2::grid.arrange(PlotList, ncol=5)
install.packages("gridExtra")
library("gridExtra")
grid.arrange(PlotList, ncol=5)
do.call("grid.arrange", c(PlotList, ncol=5))
PlotList[[1]]
print(PlotList[[1]])
for (colname in colnames){
x <- ggplot(df, aes(x=gdppc, y=.data[[colname]])) +
geom_point()
PlotList <- append(PlotList, x)
}
PlotList = list()
for (colname in colnames){
x <- ggplot(df, aes(x=gdppc, y=.data[[colname]])) +
geom_point()
PlotList <- append(PlotList, x)
}
print(PlotList[[1]])
print(x)
for (colname in colnames){
x <- ggplot(df, aes(x=gdppc, y=.data[[colname]])) +
geom_point()
print(x)
}
print(x)
for (colname in colnames){
x <- ggplot(df, aes(x=gdppc, y=.data[[colname]])) +
geom_point()
print(x)
}
x <- ggplot(df, aes(x=gdppc, y=tot_stock)) +
geom_point()
print(x)
x <- ggplot(df, aes(x=gdppc, y=total_stock)) +
geom_point()
print(x)
PlotList <- append(PlotList, x)
PlotList = list()
for (colname in colnames){
x <- ggplot(df, aes(x=gdppc, y=.data[[colname]])) +
geom_point()
PlotList <- append(PlotList, x)
}
print(PlotList[[1]])
plot_data_column(df, fin_ast)
plot_data_column = function (data, column) {
ggplot(data, aes(x=gdppc, y=.data[[column]])) +
geom_point()
}
plot_data_column(df, fin_ast)
plot_data_column(df, "fin_ast")
print(plot_data_column(df, "fin_ast"))
plot_data_column = function (data, column) {
ggplot(data, aes(x=gdppc, y=.data[[column]])) +
geom_point()
}
myplots <- lapply(colnames(df), plot_data_column, data = df)
plots_list <- lapply(colnames(df), plot_data_column, data = df)
rm(myplots)
do.call("grid.arrange", c(plots_list, ncol=5))
plots_list <- lapply(colnames, plot_data_column, data = df)
do.call("grid.arrange", c(plots_list, ncol=5))
plot_data_column = function (data, column) {
ggplot(data, aes(x=gdppc, y=.data[[column]])) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
}
plots_list <- lapply(colnames, plot_data_column, data = df)
do.call("grid.arrange", c(plots_list, ncol=5))
plot_data_column = function (data, column) {
pcc = cor(data[["gdppc"]], data[[column]])
ggplot(data, aes(x=gdppc, y=.data[[column]])) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth=0.5) +
ggtitle(as.character(pcc))
}
plots_list <- lapply(colnames, plot_data_column, data = df)
do.call("grid.arrange", c(plots_list, ncol=5))
plot_data_column = function (data, column) {
correlation_table = data[c("gdppc", column)] %>%
na.omit()
pcc = cor(data[["gdppc"]], data[[column]])
ggplot(data, aes(x=gdppc, y=.data[[column]])) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth=0.5) +
ggtitle(paste("corr: ", as.character(pcc))) +
theme(plot.title=element_text(size=10))
}
plots_list <- lapply(colnames, plot_data_column, data = df)
do.call("grid.arrange", c(plots_list, ncol=5))
plot_data_column = function (data, column) {
correlation_table = data[c("gdppc", column)] %>%
na.omit()
pcc = cor(correlation_table[["gdppc"]], correlation_table[[column]])
ggplot(data, aes(x=gdppc, y=.data[[column]])) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, linewidth=0.5) +
ggtitle(paste("corr: ", as.character(pcc))) +
theme(plot.title=element_text(size=10))
}
plots_list <- lapply(colnames, plot_data_column, data = df)
do.call("grid.arrange", c(plots_list, ncol=5))
rm(list=ls())
